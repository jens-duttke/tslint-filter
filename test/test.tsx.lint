import SomeModule from './some-module';
~ [Error in 'tslint/lib/rules/doesNotExistRule': Cannot find module 'tslint/lib/rules/doesNotExistRule'. Rule is disabled for this file]
~ [TSLint-Filter ignore pattern: Invalid regular expression: /^*/: Nothing to repeat]
import AnotherModule from './some-module';
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [Misnamed import. Import should be named 'someModule' but found 'AnotherModule' for './some-module']
       ~~~~~~~~~~~~~ [Expected import 'AnotherModule' of module './some-module' to match the default export 'someModule'.]

interface I18N {}

interface IInterface {}
          ~~~~~~~~~~ [Interface name "IInterface" must not have an "I" prefix]

// tslint:disable-next-line:interface-name
interface ISomething {}

interface A {
	a: string;
	b: string;
}

const a: A = {
	b: '',
	a: ''
	~ [The key 'a' is not in the same order as it is in 'A'.]
};

const b: Readonly<A> = {
	b: '',
	a: ''
};

console.log(a, b);

const event: KeyboardEvent = {} as KeyboardEvent;

console.log(event.which);
                  ~~~~~ [KeyboardEvent.which is deprecated.]

delete document.createElement;
                ~~~~~~~~~~~~~ [Document.createElement is deprecated.]

/** @deprecated */
type DeprecatedType = number;

const dep: DeprecatedType = 5;
           ~~~~~~~~~~~~~~ [DeprecatedType is deprecated.]

interface B {
	c: C
}

interface C {
	/** @deprecated */
	d1: string;
}

interface BB {
	c: {
		/** @deprecated */
		d2: string;
	}
	cc: {} & {
		/** @deprecated */
		d3: string;
	}
}
const deprecatedValue1: B = {} as B;
const deprecatedValue2: BB = {} as BB;

deprecatedValue1.c.d1;
                   ~~ [C.d1 is deprecated.]
deprecatedValue2.c.d2;
                   ~~ [BB.c.d2 is deprecated.]

deprecatedValue2.cc.d3;
                    ~~ [BB.cc.d3 is deprecated.]

console.log( 'Some Text');
            ~nil [there should be no spaces inside this paren.]

await import(/* webpackChunkName: "someModule" */ `./some-module`);
             ~nil [there should be no spaces inside this paren.]

await import(/* webpackChunkName: "someModule" */`./some-module`);

import(
	/* webpackChunkName: "my-chunk-name" */
	/* webpackMode: "lazy" */
	'module'
);

class Test {
	private readonly a;

	helloWorld (a, b, c) {
	~~~~~~~~~~ [The class method 'helloWorld' must be marked either 'private', 'public', or 'protected']

		let a: boolean;

		const s1: string[] = b || [];
		const s2: string[] = b && [];
		                          ~~ [This type is not allowed in the operand for the '&&' operator in VariableDeclaration because it is always truthy. It may be null/undefined, but neither 'allow-null-union' nor 'allow-undefined-union' is set. Allowed types are boolean, enum, or boolean-or-undefined.]

		if (SomeModule) {
		~~ [Use a conditional expression instead of assigning to 'a' in multiple places. (save about 36 characters, conditional expression size would be about 29 characters)]
			a = true;
		}
		else {
			a = false;
		}

		let longText;
		    ~~~~~~~~ [expected variable-declaration: 'longText' to have a typedef]

		if (!AnotherModule) {
			longText = 'Some long text to get an expression which is longer than 120 characters, so that it doesn\'t fit into one line.';
		}
		else {
			longText = 'This expression should not be converted into an conditional expression one-liner.';
		}
	}

	render () {
		const isShowMessage: boolean = Math.random() > 0.5;

		const a: string | false = (true && isShowMessage && 'Hello world');
		                                                    ~~~~~~~~~~~~~ [This type is not allowed in the operand for the '&&' operator in VariableDeclaration because it is always truthy. It may be null/undefined, but neither 'allow-null-union' nor 'allow-undefined-union' is set. Allowed types are boolean, enum, or boolean-or-undefined.]

		if ((true && isShowMessage && 'Hello world')) {
		    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [This type is not allowed in the 'if' condition because it could be a string. Allowed types are boolean, enum, or boolean-or-undefined.]
		                              ~~~~~~~~~~~~~ [This type is not allowed in the operand for the '&&' operator in IfStatement because it is always truthy. It may be null/undefined, but neither 'allow-null-union' nor 'allow-undefined-union' is set. Allowed types are boolean, enum, or boolean-or-undefined.]
			console.log(a);
		}

		return (
			<div>
				{(true && isShowMessage && 'Hello world')}
			</div>
		);
	}
}
